#!/usr/bin/env python3

import sys
import json
import socket
import argparse

BUFFER_BACKUP_LOG = 1024
BUFFER_BACKUP_LOG_SIZE = 10
PADDING_CHARACTER = '|'

REGISTER = 'REGISTER'
UNREGISTER = 'UNREGISTER'
QUERY = 'QUERY'

class Object:
    def toJSON(self):
        return json.dumps(self, default=lambda o: o.__dict__, sort_keys=False, indent=0)

def homeMenu():
	exit = False
	while not exit:
		printHomeMenu()
		option = input('Option: ')

		while True:
			if option == '1':
				registerMenu()
				break
			elif option == '2':
				unregisterMenu()
				break
			elif option == '3':
				queryMenu()
				break
			elif option.upper() == 'Q':
				exit = True
				break
			else:
				option = input('Wrong option. Retry: ')

def printHomeMenu():
	print()
	print('Backups Client')
	print('--------------')
	print('[1] REGISTER')
	print('[2] UNREGISTER')
	print('[3] QUERY')
	print('[Q] QUIT')

def registerMenu():
	print()
	req = Object()
	req.verb = REGISTER
	req.args = Object()
	req.args.ip = input('IP: ')
	req.args.port = input('Port: ')
	req.args.path = input('Path: ')
	req.args.freq = input('Freq: ')
	print()
	connect(req)

def unregisterMenu():
	print()
	req = Object()
	req.verb = UNREGISTER
	req.args = Object()
	req.args.ip = input('IP: ')
	req.args.port = input('Port: ')
	req.args.path = input('Path: ')
	print()
	connect(req)

def queryMenu():
	print()
	req = Object()
	req.verb = QUERY
	req.args = Object()
	req.args.ip = input('IP: ')
	req.args.port = input('Port: ')
	req.args.path = input('Path: ')
	print()
	connect_query(req)

def connect(req):
	with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock:
		sock.connect((args.ip, int(args.port)))
		sock.sendall(str.encode(req.toJSON().replace('\n', '') + '\n'))
		data = sock.recv(1024)

		print('Response:')
		print(data.decode('utf-8'))

def connect_query(req):
	with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock:
		sock.connect((args.ip, int(args.port)))
		sock.sendall(str.encode(req.toJSON().replace('\n', '') + '\n'))

		# Receiving result size
		data = sock.recv(BUFFER_BACKUP_LOG_SIZE)
		size = int(trim_padding(data.decode('utf-8')))

		if size > 0:

			data = b''
			received = 0
			while received < size:

				if (size - received) < BUFFER_BACKUP_LOG:
					data += sock.recv(size - received)
				else:
					data += sock.recv(BUFFER_BACKUP_LOG)

				received += BUFFER_BACKUP_LOG

			print('Response:')
			print(data.decode('utf-8'))

		else:
			print('There was some errors retrieving the requested information.')

def trim_padding(message):
	reversed = message[::-1]

	for idx in range(len(reversed)):
		if reversed[idx] != PADDING_CHARACTER:
			return reversed[idx::][::-1]

	return ''


parser = argparse.ArgumentParser()

parser.add_argument('--ip', type=str, default='')
parser.add_argument('--port', type=str, default='')

args = parser.parse_args()

if not args.ip:
	print('Missing server IP.')
	sys.exit()

if not args.port:
	print('Missing server Port.')
	sys.exit()

exit = False
homeMenu()
