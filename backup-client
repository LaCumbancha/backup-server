#!/usr/bin/env python3

import sys
import json
import socket
import argparse

REGISTER = 'REGISTER'
UNREGISTER = 'UNREGISTER'
QUERY = 'QUERY'

class Object:
    def toJSON(self):
        return json.dumps(self, default=lambda o: o.__dict__, sort_keys=False, indent=0)

def homeMenu():
	exit = False
	while not exit:
		printHomeMenu()
		option = input('Option: ')

		while True:
			if option == '1':
				registerMenu()
				break
			elif option == '2':
				unregisterMenu()
				break
			elif option == '3':
				queryMenu()
				break
			elif option.upper() == 'Q':
				exit = True
				break
			else:
				option = input('Wrong option. Retry: ')

def printHomeMenu():
	print()
	print('Backups Client')
	print('--------------')
	print('[1] REGISTER')
	print('[2] UNREGISTER')
	print('[3] QUERY')
	print('[Q] QUIT')

def registerMenu():
	print()
	req = Object()
	req.verb = REGISTER
	req.args = Object()
	req.args.ip = input('IP: ')
	req.args.port = input('Port: ')
	req.args.path = input('Path: ')
	req.args.freq = input('Freq: ')
	connect(req)

def unregisterMenu():
	print()
	req = Object()
	req.verb = UNREGISTER
	req.args = Object()
	req.args.ip = input('IP: ')
	req.args.port = input('Port: ')
	req.args.path = input('Path: ')
	connect(req)

def queryMenu():
	print()
	req = Object()
	req.verb = QUERY
	req.args = Object()
	req.args.ip = input('IP: ')
	req.args.port = input('Port: ')
	req.args.path = input('Path: ')
	connect(req)

def connect(req):
	with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock:
		sock.connect((args.ip, int(args.port)))
		sock.sendall(str.encode(req.toJSON().replace('\n', '') + '\n'))
		data = sock.recv(1024)

		print('Response: ', repr(data))

parser = argparse.ArgumentParser()

parser.add_argument('--ip', type=str, default='')
parser.add_argument('--port', type=str, default='')

args = parser.parse_args()

if not args.ip:
	print('Missing server IP.')
	sys.exit()

if not args.port:
	print('Missing server Port.')
	sys.exit()

exit = False
homeMenu()
